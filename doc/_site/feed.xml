<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2017-03-29T22:19:38+08:00</updated><id>http://0.0.0.0:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Yarn FS</title><link href="http://0.0.0.0:4000/jekyll/update/2017/03/25/Yarn-FS.html" rel="alternate" type="text/html" title="Yarn FS" /><published>2017-03-25T12:08:13+08:00</published><updated>2017-03-25T12:08:13+08:00</updated><id>http://0.0.0.0:4000/jekyll/update/2017/03/25/Yarn-FS</id><content type="html" xml:base="http://0.0.0.0:4000/jekyll/update/2017/03/25/Yarn-FS.html">&lt;h1 id=&quot;preview&quot;&gt;Preview&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;the whole process to allocate, update and reclaim resource&lt;/li&gt;
  &lt;li&gt;mechanism from the view of lock and thread&lt;/li&gt;
  &lt;li&gt;FS Metric&lt;/li&gt;
  &lt;li&gt;performance limitation and what will cause this&lt;/li&gt;
  &lt;li&gt;the process of RM startup&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;artifact:&lt;/strong&gt; flow char to make everyone know the important detail of FS in terms of performance bottleneck, configuration&amp;amp;metric&amp;amp;log scope of influence, how does each sub component collaborate&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;fair-scheduler-inside&quot;&gt;Fair scheduler inside&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;done&lt;/strong&gt; updateThread&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;done&lt;/strong&gt; updateCall&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;done&lt;/strong&gt; Preemption&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;done&lt;/strong&gt; Allocate&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;done&lt;/strong&gt; NMUpdate&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;doing&lt;/strong&gt; FS Algorithms and related configuration&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;doing&lt;/strong&gt; RM command&lt;/p&gt;

&lt;p&gt;YARN HA &amp;amp; Zookeeper
the class hierachy of FS
Yarn Preserve
Resource Preserved
Queue Structure and configuration
Policy, Priority, local&amp;amp;rack local&amp;amp;any
how to extract usful info form RM log? # make a flow char, introduce what kind of log will be generated on each flow point.
summarize the design pattern of RM and its class diagram
introcude how to inplement a state machine in Java&amp;amp;Python, how state machine takes greate effect in YARN?
introcude java concurrent knowledge, lock level, class and example, performance, use case.(inspired by different type of lock usage in RM)
timeline server in YARN?
introduce DRF&lt;/p&gt;

&lt;h3 id=&quot;the-process-of-allcating-container-for-am&quot;&gt;The process of allcating container for AM&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ResourceRequest:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    priority
    resourceName
    capacity
    numContainers # decrease by 1 everytime this request is satisfied on allocation, if it reaches 0, the request will be removed
    relaxLocality: Boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Every allocateRequest and Response has a monotone increasing number to ensure its correctness.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;FS.releaseContainers(List&lt;ContainerId&gt;, SchedulerApplicationAttempt)
&lt;/ContainerId&gt;    &lt;ul&gt;
      &lt;li&gt;FS.completedContainer() in a for loop&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;lock(FSAppAttempt, current application)
    &lt;ul&gt;
      &lt;li&gt;upsert request in FSAppAttempt.appSchedulingInfo
        &lt;blockquote&gt;
          &lt;p&gt;app has lots of priorities, each priority has requests for different type of resource, each request has a numer of containers&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;FSAppAttempt.updateBlackList&lt;/li&gt;
      &lt;li&gt;FSAppAttempt.pullNewlyAllocatedContainersAndNMTokens() # it means containers are allocated asynchronously.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;related-configurationi-assume&quot;&gt;Related Configuration(I assume):&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;AM update interval&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;howwhen-to-release-container&quot;&gt;How&amp;amp;When to release container?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;entrance:&lt;/strong&gt; (FS.lock) FS.completedContainer(RMContainer, ContainerStatus, RMContainerEventType) # unreserve or release container&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;FSAppAttempt.containerCompleted()
    &lt;ul&gt;
      &lt;li&gt;remove from list of newly allocated containers&lt;/li&gt;
      &lt;li&gt;send event to StateMachine to update the container state&lt;/li&gt;
      &lt;li&gt;remove from list of containers&lt;/li&gt;
      &lt;li&gt;update queue resource; update app resource consumption&lt;/li&gt;
      &lt;li&gt;remove the container from preemption cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;remove container from SchedulerNode and add its available resource&lt;/li&gt;
  &lt;li&gt;update root queue resource.(subqueue metrics might be a little out of date until the update interval)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-process-of-nodeupdate&quot;&gt;The process of NodeUpdate&lt;/h2&gt;
&lt;p&gt;// node resource is updated only on node registration
// what is NodeHeartbeatResponse.nextHeartbeatInterval?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ResourceTracker.nodeHeartbeat(NodeHeartbeatRequest)&lt;/strong&gt;:
Here is the node heartbeat sequence…&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Check if it’s a registered node&lt;/li&gt;
  &lt;li&gt;Check if it’s a valid (i.e. not excluded) node&lt;/li&gt;
  &lt;li&gt;Check if it’s a ‘fresh’ heartbeat i.e. not duplicate heartbeat&lt;/li&gt;
  &lt;li&gt;Send healthStatus to RMNode, update containers info of RMNode
//update response: (RMNode.writeLock.lock()) remove container,application from NM&lt;/li&gt;
  &lt;li&gt;dispatch the NodeHeartbeatRequest to update the container status
 [E]STATUS_UPDATE –&amp;gt; RMNodeImpl –&amp;gt; [E]NODE_UPDATE –&amp;gt; (FS.lock )FS.nodeUpdate(RMNode)&lt;/li&gt;
  &lt;li&gt;FS.nodeUpdate()
    &lt;ul&gt;
      &lt;li&gt;update the information of newly launched containers in AppAttempt&lt;/li&gt;
      &lt;li&gt;completedContainer&lt;/li&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;//TODO: will the nodeHeartbeat finish until the end of FS.nodeUpdate? Is dispatch sync or async?&lt;/p&gt;

&lt;p&gt;// TODO: hightlight the content of NMResponse to show what the NM will do&lt;/p&gt;

&lt;h2 id=&quot;fs-algorithms-and-related-configuration&quot;&gt;FS Algorithms and related configuration&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;FS.nodeUpdate&lt;/li&gt;
  &lt;li&gt;FS.continuousScheduling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;core: FSParentQueue.assignContainer(FSSchedulerNode)
	1. 
// if FSSchedulerNode.getReservedContainer!=null, this node doesn’t participate the assignment.
ParentQueue.assignContainer –&amp;gt; LeafQueue.assignContainer –&amp;gt; FSApp.assignContainer # depth first search based on priority&lt;/p&gt;

&lt;h2 id=&quot;the-rm-command&quot;&gt;The RM command&lt;/h2&gt;

&lt;p&gt;NodeAction.SHUTDOWN&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nodeManager version is not invalid&lt;/li&gt;
  &lt;li&gt;node not in hostsList or in excludeList # I find it ok for both hostname and ip&lt;/li&gt;
  &lt;li&gt;node doesn’t has enough minimum allocation resource
NodeAction.NORMAL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;what is the AM Command?&lt;/li&gt;
  &lt;li&gt;what is reserved container &amp;amp; resource? How is it treated differently? # one node can only reserve one container; one app can reserve multiple containers for on different node for different priority; a node’s reserved container can be overridden by that of a more precedent app&lt;/li&gt;
  &lt;li&gt;what is pending resource in AppSchedulingInfo?&lt;/li&gt;
  &lt;li&gt;why to deactivate the application? activeUsersManager.deactivateApplication(user, applicationId)&lt;/li&gt;
  &lt;li&gt;what is unmanged am?&lt;/li&gt;
  &lt;li&gt;what is content in blackList of FSAppAttempt?&lt;/li&gt;
  &lt;li&gt;what is the importance of FSAppAttempt headroom which is updated on allocation?&lt;/li&gt;
  &lt;li&gt;what is clusterTimeStamp?
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     if (System.currentTimeMillis() - ResourceManager.getClusterTimeStamp()
         &amp;lt; nmExpireInterval) {
       LOG.info(containerId + &quot; doesn't exist. Add the container&quot;
           + &quot; to the release request cache as it maybe on recovery.&quot;);
       synchronized (attempt) {
         attempt.getPendingRelease().add(containerId);
       }
     }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;nodeLocality, rackLocality&lt;/li&gt;
  &lt;li&gt;summarize all the event between FS, NM and AM as well as how those events are handled&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;important&lt;/strong&gt; list all the resource name in FSAppAttempt, difference between request locality, LocalityThreshold? (vcore, memory? ANY, rackName, nodeName, off switch?) locality logic in FSApp.assignContainer?&lt;/li&gt;
  &lt;li&gt;configurationj tuning
```
  /** Whether to assign multiple containers in one check-in. */
  public static final String  ASSIGN_MULTIPLE = CONF_PREFIX + “assignmultiple”;
  protected static final boolean DEFAULT_ASSIGN_MULTIPLE = false;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;/** Whether to give more weight to apps requiring many resources. */
  protected static final String  SIZE_BASED_WEIGHT = CONF_PREFIX + “sizebasedweight”;
  protected static final boolean DEFAULT_SIZE_BASED_WEIGHT = false;&lt;/p&gt;

&lt;p&gt;/** Maximum number of containers to assign on each check-in. */
  protected static final String MAX_ASSIGN = CONF_PREFIX + “max.assign”;
  protected static final int DEFAULT_MAX_ASSIGN = -1;&lt;/p&gt;

&lt;p&gt;/** The update interval for calculating resources in FairScheduler .*/
  public static final String UPDATE_INTERVAL_MS =
      CONF_PREFIX + “update-interval-ms”;
  public static final int DEFAULT_UPDATE_INTERVAL_MS = 500;
```&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;what is applicableDepth and how to change it?&lt;/li&gt;
  &lt;li&gt;if assignContainerPreCheck(node) in FSLeafQueue.assignContainer is necessary ? this has been checked in the previous step&lt;/li&gt;
  &lt;li&gt;how to determine the minShare, fairShare and weight of FSApp?&lt;/li&gt;
  &lt;li&gt;replace the compairison method with the heap sort in FS?&lt;/li&gt;
  &lt;li&gt;unmanagedAM is the AM runs on independent mode.&lt;/li&gt;
  &lt;li&gt;what is the essential meaning of fairness, the chance of being scheduled? I find that some app use more resource than others, because of weight or usage based weight? will the resource of the lower weight app be preempted by a higher weight app of the same queue?&lt;/li&gt;
  &lt;li&gt;what is the initial fair share of app?&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Preview the whole process to allocate, update and reclaim resource mechanism from the view of lock and thread FS Metric performance limitation and what will cause this the process of RM startup artifact: flow char to make everyone know the important detail of FS in terms of performance bottleneck, configuration&amp;amp;metric&amp;amp;log scope of influence, how does each sub component collaborate</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://0.0.0.0:4000/jekyll/update/2017/03/25/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-03-25T12:08:13+08:00</published><updated>2017-03-25T12:08:13+08:00</updated><id>http://0.0.0.0:4000/jekyll/update/2017/03/25/welcome-to-jekyll</id><content type="html" xml:base="http://0.0.0.0:4000/jekyll/update/2017/03/25/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def hehe():
    print '11111'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>